[{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"7a8140e038eb66ccbffbad4b5b16abd3","permalink":"/dart/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/dart/","section":"dart","summary":"pip-services3-commons-dart The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n pip-services3-components-dart The Components module contains standard component definitions that can be used to build applications and services.\n pip-services3-container-dart The Container module provides a light-weight container that can be embedded inside a service or application, or can be run by itself, as a system process, for example.","tags":null,"title":"Dart","type":"docs","url":"/dart/","weight":20,"wordcount":249},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"44ef1eec55d2959beeea4bebcb15cee6","permalink":"/golang/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/","section":"golang","summary":"pip-services3-commons-dart The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n pip-services3-components-dotnet The Components module contains standard component definitions that can be used to build applications and services.\n pip-services3-container-dotnet The Container module provides a light-weight container that can be embedded inside a service or application, or can be run by itself, as a system process, for example.","tags":null,"title":"Golang","type":"docs","url":"/golang/","weight":20,"wordcount":249},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"2b62044fc16bda9f99b26a1c782d40a0","permalink":"/node/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/","section":"node","summary":"pip-services3-commons-node The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n pip-services3-components-node The Components module contains standard component definitions that can be used to build applications and services.\n pip-services3-container-node The Container module provides a light-weight container that can be embedded inside a service or application, or can be run by itself, as a system process, for example.","tags":null,"title":"Node.js","type":"docs","url":"/node/","weight":20,"wordcount":249},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"43c9f2d0f31ce5b405628ba606b38b91","permalink":"/python/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/","section":"python","summary":"pip-services3-commons-python The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n pip-services3-components-python The Components module contains standard component definitions that can be used to build applications and services.\n pip-services3-container-python The Container module provides a light-weight container that can be embedded inside a service or application, or can be run by itself, as a system process, for example.","tags":null,"title":"Python","type":"docs","url":"/python/","weight":20,"wordcount":249},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"home","lang":"en","lastmod":-62135596800,"objectID":"3976528693a0108357f4928017600865","permalink":"/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/","section":"","summary":"What is Pip.Services toolkit?  Pip.Services Toolkit speeds up development of production-grade microservices for various cloud and on-premises platforms in the language of your choice. Symmetric implementation of structures and patterns across all supported languages and out-of-the-box interoperability simplify development in polyglot environments. The toolkit design based on composition allows to mix it with other frameworks and libraries.\n What can you do with Pip.Services toolkit?   Speed up your microservice development by using prebuilt patterns and components.","tags":null,"title":"","type":"docs","url":"/","weight":0,"wordcount":146},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-components/auth/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"426f3a942ad057c924f496c6eb94e2b7","permalink":"/dart/pip-services3-components/auth/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-components/auth/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Auth","type":"docs","url":"/dart/pip-services3-components/auth/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-components/auth/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"14a9ba1bb5a7ce6ef069e9b1ab3cd244","permalink":"/golang/pip-services3-components/auth/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-components/auth/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Auth","type":"docs","url":"/golang/pip-services3-components/auth/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/auth/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"fa74a6306f9df9c689eb2fbae27a88df","permalink":"/net/pip-services3-components/auth/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/auth/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Auth","type":"docs","url":"/net/pip-services3-components/auth/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/auth/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"a7558a84e66a84a95e8ff5efb951e6d2","permalink":"/node/pip-services3-components/auth/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/auth/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Auth","type":"docs","url":"/node/pip-services3-components/auth/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/auth/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"0019ce81c0fbe83fc8bf26394a9507cf","permalink":"/python/pip-services3-components/auth/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/auth/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Auth","type":"docs","url":"/python/pip-services3-components/auth/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-components/build/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"8a5e609ba18547bacb7ae3c953f140a7","permalink":"/dart/pip-services3-components/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-components/build/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Build","type":"docs","url":"/dart/pip-services3-components/build/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-components/build/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"223005fad4a6c7cf71c1187c06ebf169","permalink":"/golang/pip-services3-components/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-components/build/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Build","type":"docs","url":"/golang/pip-services3-components/build/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/build/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"b9b02ed18a20a6c0fdb2563c8044a712","permalink":"/net/pip-services3-components/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/build/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Build","type":"docs","url":"/net/pip-services3-components/build/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/build/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"c3923d4980562a1b3628ab6667dbb7d5","permalink":"/node/pip-services3-components/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/build/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Build","type":"docs","url":"/node/pip-services3-components/build/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/build/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"2255a51e4fcba8da1adb80b486d7b9fe","permalink":"/python/pip-services3-components/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/build/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Build","type":"docs","url":"/python/pip-services3-components/build/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-components/cache/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"d66c8daf21f4f48b4a8fdf178f1241f7","permalink":"/dart/pip-services3-components/cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-components/cache/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Cache","type":"docs","url":"/dart/pip-services3-components/cache/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-components/cache/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"a446efeea72b0cdacf5dce735e9f994c","permalink":"/golang/pip-services3-components/cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-components/cache/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Cache","type":"docs","url":"/golang/pip-services3-components/cache/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/cache/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"a6f49be9818e8e306f083b9622156004","permalink":"/net/pip-services3-components/cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/cache/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Cache","type":"docs","url":"/net/pip-services3-components/cache/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/cache/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"a17d227437eb4ab54b3fb5474efe8079","permalink":"/node/pip-services3-components/cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/cache/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Cache","type":"docs","url":"/node/pip-services3-components/cache/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/cache/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"bd17b75c63f93e1feaaf88b73b54cc38","permalink":"/python/pip-services3-components/cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/cache/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Cache","type":"docs","url":"/python/pip-services3-components/cache/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-commons/commands/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"17ec2d6ea89af241e705567efd47db57","permalink":"/dart/pip-services3-commons/commands/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-commons/commands/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Commands","type":"docs","url":"/dart/pip-services3-commons/commands/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-commons/commands/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"882cf50894021de6f14d597ab0d197ba","permalink":"/golang/pip-services3-commons/commands/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-commons/commands/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Commands","type":"docs","url":"/golang/pip-services3-commons/commands/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/commands/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"7443abadcf10fa24a61fd6cc0252f0d0","permalink":"/net/pip-services3-commons/commands/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/commands/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Commands","type":"docs","url":"/net/pip-services3-commons/commands/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/commands/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"1754b9398f349ee0d4bea8b0fd23caef","permalink":"/node/pip-services3-commons/commands/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/commands/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Commands","type":"docs","url":"/node/pip-services3-commons/commands/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/commands/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"b2c767ee060cf60c55d932bae99d94f4","permalink":"/python/pip-services3-commons/commands/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/commands/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Commands","type":"docs","url":"/python/pip-services3-commons/commands/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-commons/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"e05b98a3b2d93935386e655062666d12","permalink":"/dart/pip-services3-commons/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-commons/config/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/dart/pip-services3-commons/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-components/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"d9149df6db596b430f76b9fecf8c4e84","permalink":"/dart/pip-services3-components/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-components/config/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/dart/pip-services3-components/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-commons/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"353ace5d10c9ea925b5f24cb1e1b8aa1","permalink":"/golang/pip-services3-commons/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-commons/config/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/golang/pip-services3-commons/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-components/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"5d7c9168f73b14d926384786ec8a8906","permalink":"/golang/pip-services3-components/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-components/config/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/golang/pip-services3-components/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"8abd909bfe63a350b5d240e1d957e199","permalink":"/net/pip-services3-commons/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/config/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/net/pip-services3-commons/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"f341e2259706b43593fe9278180fa49d","permalink":"/net/pip-services3-components/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/config/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/net/pip-services3-components/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"78b26f4913fa7a74545f380c481859b4","permalink":"/node/pip-services3-commons/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/config/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/node/pip-services3-commons/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"de8c370bf89b3eec2e7baf9c805c9cf4","permalink":"/node/pip-services3-components/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/config/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/node/pip-services3-components/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"74b9d3690077ba586d20a197f787597d","permalink":"/python/pip-services3-commons/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/config/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/python/pip-services3-commons/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"2cc98506c43784a12d63a0cc631c454c","permalink":"/python/pip-services3-components/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/config/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/python/pip-services3-components/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-components/connect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"c9e77eb048f3c369f182569e26710f87","permalink":"/dart/pip-services3-components/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-components/connect/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Connect","type":"docs","url":"/dart/pip-services3-components/connect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-components/connect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"50a0d901087b711373c6c1e57fde0c91","permalink":"/golang/pip-services3-components/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-components/connect/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Connect","type":"docs","url":"/golang/pip-services3-components/connect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/connect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"cd1b64d7d3fa833e2901529fee572c11","permalink":"/net/pip-services3-components/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/connect/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Connect","type":"docs","url":"/net/pip-services3-components/connect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/connect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"b7fc9be1d62b9a7600f59cf248100a1a","permalink":"/node/pip-services3-components/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/connect/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Connect","type":"docs","url":"/node/pip-services3-components/connect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/connect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"96bd34473d436768872a6d18418f916a","permalink":"/python/pip-services3-components/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/connect/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Connect","type":"docs","url":"/python/pip-services3-components/connect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-commons/convert/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"dae2d139e860b9508662ce750eb036f9","permalink":"/dart/pip-services3-commons/convert/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-commons/convert/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Convert","type":"docs","url":"/dart/pip-services3-commons/convert/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-commons/convert/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"d49841c216e786138aca2ac4ef37e2d0","permalink":"/golang/pip-services3-commons/convert/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-commons/convert/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Convert","type":"docs","url":"/golang/pip-services3-commons/convert/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/convert/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"b940374767cf065353134f8714bdf2e3","permalink":"/net/pip-services3-commons/convert/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/convert/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Convert","type":"docs","url":"/net/pip-services3-commons/convert/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/convert/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"e6b0b5f8963c5a1841bd463e71eb5152","permalink":"/node/pip-services3-commons/convert/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/convert/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Convert","type":"docs","url":"/node/pip-services3-commons/convert/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/convert/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"730c370397a51d1074831e8ae7887421","permalink":"/python/pip-services3-commons/convert/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/convert/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Convert","type":"docs","url":"/python/pip-services3-commons/convert/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-components/count/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"128b93a9573e6e129edc6c77b846521a","permalink":"/dart/pip-services3-components/count/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-components/count/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Count","type":"docs","url":"/dart/pip-services3-components/count/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-components/count/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"8e9a97017b9caeea0e837f65096e0b06","permalink":"/golang/pip-services3-components/count/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-components/count/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Count","type":"docs","url":"/golang/pip-services3-components/count/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/count/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"664f8d96e92955561bca4abe54d4697a","permalink":"/net/pip-services3-components/count/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/count/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Count","type":"docs","url":"/net/pip-services3-components/count/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/count/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"aa9520c1ee2167f519b3a83808c77a7b","permalink":"/node/pip-services3-components/count/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/count/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Count","type":"docs","url":"/node/pip-services3-components/count/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/count/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"865f48d775a63938155d876135c2f361","permalink":"/python/pip-services3-components/count/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/count/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Count","type":"docs","url":"/python/pip-services3-components/count/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-commons/data/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"40ce71dd78c163bcb5949e5937dcff51","permalink":"/dart/pip-services3-commons/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-commons/data/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Data","type":"docs","url":"/dart/pip-services3-commons/data/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-commons/data/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"d61f12007ee1f3915fcb191a806e11ed","permalink":"/golang/pip-services3-commons/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-commons/data/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Data","type":"docs","url":"/golang/pip-services3-commons/data/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/data/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"5fb92f23563cf929daeb096963a3d72c","permalink":"/net/pip-services3-commons/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/data/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Data","type":"docs","url":"/net/pip-services3-commons/data/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/data/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"29b6303ddfa50a88bd6c56a476eaf323","permalink":"/node/pip-services3-commons/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/data/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Data","type":"docs","url":"/node/pip-services3-commons/data/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/data/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"b6bf132a9f1cb311707b2530e058554c","permalink":"/python/pip-services3-commons/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/data/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Data","type":"docs","url":"/python/pip-services3-commons/data/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-commons/errors/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"8090291861ef07403354291eea67565b","permalink":"/dart/pip-services3-commons/errors/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-commons/errors/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Errors","type":"docs","url":"/dart/pip-services3-commons/errors/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-commons/errors/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"6933c58b0bdaf53de502d2c6717ad6c9","permalink":"/golang/pip-services3-commons/errors/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-commons/errors/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Errors","type":"docs","url":"/golang/pip-services3-commons/errors/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/errors/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"232720dfe4fef686a82eaf01dd9be0d7","permalink":"/net/pip-services3-commons/errors/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/errors/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Errors","type":"docs","url":"/net/pip-services3-commons/errors/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/errors/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"afb2e38149acd3989dd65797b5c4f218","permalink":"/node/pip-services3-commons/errors/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/errors/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Errors","type":"docs","url":"/node/pip-services3-commons/errors/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/errors/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"b794247ba831a0d3e51884cb6b7722a4","permalink":"/python/pip-services3-commons/errors/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/errors/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Errors","type":"docs","url":"/python/pip-services3-commons/errors/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"acce8be8b0123631e58130cc34d7f08e","permalink":"/get_started/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/get_started/","section":"","summary":"","tags":null,"title":"Get Started","type":"docs","url":"/get_started/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-components/info/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"1e47d460c6fd2a0c5147412ef0239f57","permalink":"/dart/pip-services3-components/info/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-components/info/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Info","type":"docs","url":"/dart/pip-services3-components/info/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-components/info/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"3a9eb5d2ed80cdbbd9065344558a0682","permalink":"/golang/pip-services3-components/info/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-components/info/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Info","type":"docs","url":"/golang/pip-services3-components/info/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/info/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"7650ff55bbf8f9847518997718195cc9","permalink":"/net/pip-services3-components/info/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/info/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Info","type":"docs","url":"/net/pip-services3-components/info/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/info/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"8e1b59ca9f345111173429962e37b640","permalink":"/node/pip-services3-components/info/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/info/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Info","type":"docs","url":"/node/pip-services3-components/info/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/info/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"c86e1dc09657c3125778179995eff4f1","permalink":"/python/pip-services3-components/info/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/info/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Info","type":"docs","url":"/python/pip-services3-components/info/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-components/lock/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"106e67266cca641fb486eb4ebbcad937","permalink":"/dart/pip-services3-components/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-components/lock/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Lock","type":"docs","url":"/dart/pip-services3-components/lock/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-components/lock/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"f279755b60c669a34438d253f311b0a4","permalink":"/golang/pip-services3-components/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-components/lock/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Lock","type":"docs","url":"/golang/pip-services3-components/lock/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/lock/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"ab488c5d6087b043d9f963e35e347678","permalink":"/net/pip-services3-components/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/lock/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Lock","type":"docs","url":"/net/pip-services3-components/lock/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/lock/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"349adcc6d89c7827b5a0f67f303c637c","permalink":"/node/pip-services3-components/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/lock/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Lock","type":"docs","url":"/node/pip-services3-components/lock/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/lock/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"67d3c99053c992604fabd67937247e45","permalink":"/python/pip-services3-components/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/lock/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Lock","type":"docs","url":"/python/pip-services3-components/lock/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-components/log/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"3709b47f7dd29c0644c57faf2921d7a6","permalink":"/dart/pip-services3-components/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-components/log/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Log","type":"docs","url":"/dart/pip-services3-components/log/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-components/log/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"5a1c037c0d00d59621560d1c357d7924","permalink":"/golang/pip-services3-components/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-components/log/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Log","type":"docs","url":"/golang/pip-services3-components/log/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/log/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"ba3d0064d1b1a952635a28dd821cabd1","permalink":"/net/pip-services3-components/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/log/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Log","type":"docs","url":"/net/pip-services3-components/log/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/log/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"d05b07c87482b2335df556907e65a775","permalink":"/node/pip-services3-components/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/log/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Log","type":"docs","url":"/node/pip-services3-components/log/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/log/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"e3cd2f536ee63d3a5df1b608d9000aa7","permalink":"/python/pip-services3-components/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/log/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Log","type":"docs","url":"/python/pip-services3-components/log/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","dir":"net/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"7509050a6efa431f70effd017230397a","permalink":"/net/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/","section":"net","summary":"pip-services3-commons-dotnet The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n pip-services3-components-dotnet The Components module contains standard component definitions that can be used to build applications and services.\n pip-services3-container-dotnet The Container module provides a light-weight container that can be embedded inside a service or application, or can be run by itself, as a system process, for example.","tags":null,"title":"Net","type":"docs","url":"/net/","weight":0,"wordcount":249},{"authors":null,"categories":null,"date":-62135596800,"description":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","dir":"dart/pip-services3-commons/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"69dd1b9226f828b0e158d28bef7a80ab","permalink":"/dart/pip-services3-commons/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/dart/pip-services3-commons/","section":"dart","summary":"The module consists of the following packages:\n Commands - Commanding and eventing patterns Config - Configuration primitives Convert - Data converters Data - Data patterns Errors - Application errors Random -Random data generators Refer -Locator (IoC) pattern Reflect - Cross-language reflection Run - Component lifecycle management Validate - Validation framework   Quick links  Configuration Pattern Locator Pattern Component Lifecycle Components with Active Logic Data Patterns Get Help Contribute  Use Install the dotnet package as","tags":null,"title":"pip-services3-commons","type":"docs","url":"/dart/pip-services3-commons/","weight":0,"wordcount":287},{"authors":null,"categories":null,"date":-62135596800,"description":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","dir":"golang/pip-services3-commons/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"b538d8972ba8a14126bf6975cec29411","permalink":"/golang/pip-services3-commons/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/pip-services3-commons/","section":"golang","summary":"The module consists of the following packages:\n Commands - Commanding and eventing patterns Config - Configuration primitives Convert - Data converters Data - Data patterns Errors - Application errors Random -Random data generators Refer -Locator (IoC) pattern Reflect - Cross-language reflection Run - Component lifecycle management Validate - Validation framework   Quick links  Configuration Pattern Locator Pattern Component Lifecycle Components with Active Logic Data Patterns Get Help Contribute  Use Install the dotnet package as","tags":null,"title":"pip-services3-commons","type":"docs","url":"/golang/pip-services3-commons/","weight":0,"wordcount":287},{"authors":null,"categories":null,"date":-62135596800,"description":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","dir":"net/pip-services3-commons/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"3e57a2bae192a5cdc87c3b7aa03966e4","permalink":"/net/pip-services3-commons/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/pip-services3-commons/","section":"net","summary":"The module consists of the following packages:\n Commands - Commanding and eventing patterns Config - Configuration primitives Convert - Data converters Data - Data patterns Errors - Application errors Random -Random data generators Refer -Locator (IoC) pattern Reflect - Cross-language reflection Run - Component lifecycle management Validate - Validation framework   Quick links  Configuration Pattern Locator Pattern Component Lifecycle Components with Active Logic Data Patterns Get Help Contribute  Use Install the dotnet package as","tags":null,"title":"pip-services3-commons","type":"docs","url":"/net/pip-services3-commons/","weight":0,"wordcount":287},{"authors":null,"categories":null,"date":-62135596800,"description":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","dir":"node/pip-services3-commons/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"cf773571cec9afb3aa7cebcc563a85e4","permalink":"/node/pip-services3-commons/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/pip-services3-commons/","section":"node","summary":"The module consists of the following packages:\n Commands - Commanding and eventing patterns Config - Configuration primitives Convert - Data converters Data - Data patterns Errors - Application errors Random -Random data generators Refer -Locator (IoC) pattern Reflect - Cross-language reflection Run - Component lifecycle management Validate - Validation framework   Quick links  Configuration Pattern Locator Pattern Component Lifecycle Components with Active Logic Data Patterns Get Help Contribute  Use Install the dotnet package as","tags":null,"title":"pip-services3-commons","type":"docs","url":"/node/pip-services3-commons/","weight":0,"wordcount":287},{"authors":null,"categories":null,"date":-62135596800,"description":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","dir":"python/pip-services3-commons/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"2f0514e12567c7e5cc663d13b901ccf1","permalink":"/python/pip-services3-commons/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/pip-services3-commons/","section":"python","summary":"The module consists of the following packages:\n Commands - Commanding and eventing patterns Config - Configuration primitives Convert - Data converters Data - Data patterns Errors - Application errors Random -Random data generators Refer -Locator (IoC) pattern Reflect - Cross-language reflection Run - Component lifecycle management Validate - Validation framework   Quick links  Configuration Pattern Locator Pattern Component Lifecycle Components with Active Logic Data Patterns Get Help Contribute  Use Install the dotnet package as","tags":null,"title":"pip-services3-commons","type":"docs","url":"/python/pip-services3-commons/","weight":0,"wordcount":287},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe Components module contains standard component definitions that can be used to build applications and services.\n","dir":"dart/pip-services3-components/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"c2d34055a5a954c66808b003b76e1410","permalink":"/dart/pip-services3-components/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/dart/pip-services3-components/","section":"dart","summary":"The module contains the following packages:\n Auth - authentication credential stores Build - basic factories for constructing objects Cache - distributed cache Config - configuration readers and managers, whose main task is to deliver configuration parameters to the application from wherever they are being stored Connect - connection discovery and configuration services Count - performance counters Info - context info implementations that manage the saving of process information and sending additional parameter sets Lock - distributed lock components Log - basic logging components that provide console and composite logging, as well as an interface for developing custom loggers Test - minimal set of test components to make testing easier Component - the root package   Quick links  Logging Configuration API Reference Change Log Get Help Contribute Examples  Warning!","tags":null,"title":"pip-services3-components","type":"docs","url":"/dart/pip-services3-components/","weight":0,"wordcount":579},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe Components module contains standard component definitions that can be used to build applications and services.\n","dir":"golang/pip-services3-components/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"5f8cbf913530d00d991ce7f62bbe3f36","permalink":"/golang/pip-services3-components/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/pip-services3-components/","section":"golang","summary":"The module contains the following packages:\n Auth - authentication credential stores Build - basic factories for constructing objects Cache - distributed cache Config - configuration readers and managers, whose main task is to deliver configuration parameters to the application from wherever they are being stored Connect - connection discovery and configuration services Count - performance counters Info - context info implementations that manage the saving of process information and sending additional parameter sets Lock - distributed lock components Log - basic logging components that provide console and composite logging, as well as an interface for developing custom loggers Test - minimal set of test components to make testing easier Component - the root package   Quick links  Logging Configuration API Reference Change Log Get Help Contribute Examples  Warning!","tags":null,"title":"pip-services3-components","type":"docs","url":"/golang/pip-services3-components/","weight":0,"wordcount":579},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe Components module contains standard component definitions that can be used to build applications and services.\n","dir":"net/pip-services3-components/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"23cb032834008c7a735f68c1b86bf8fe","permalink":"/net/pip-services3-components/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/pip-services3-components/","section":"net","summary":"The module contains the following packages:\n Auth - authentication credential stores Build - basic factories for constructing objects Cache - distributed cache Config - configuration readers and managers, whose main task is to deliver configuration parameters to the application from wherever they are being stored Connect - connection discovery and configuration services Count - performance counters Info - context info implementations that manage the saving of process information and sending additional parameter sets Lock - distributed lock components Log - basic logging components that provide console and composite logging, as well as an interface for developing custom loggers Test - minimal set of test components to make testing easier Component - the root package   Quick links  Logging Configuration API Reference Change Log Get Help Contribute Examples  Warning!","tags":null,"title":"pip-services3-components","type":"docs","url":"/net/pip-services3-components/","weight":0,"wordcount":579},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe Components module contains standard component definitions that can be used to build applications and services.\n","dir":"node/pip-services3-components/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"2a194db49aa20fa9dffa22b0b049068c","permalink":"/node/pip-services3-components/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/pip-services3-components/","section":"node","summary":"The module contains the following packages:\n Auth - authentication credential stores Build - basic factories for constructing objects Cache - distributed cache Config - configuration readers and managers, whose main task is to deliver configuration parameters to the application from wherever they are being stored Connect - connection discovery and configuration services Count - performance counters Info - context info implementations that manage the saving of process information and sending additional parameter sets Lock - distributed lock components Log - basic logging components that provide console and composite logging, as well as an interface for developing custom loggers Test - minimal set of test components to make testing easier Component - the root package   Quick links  Logging Configuration API Reference Change Log Get Help Contribute Examples  Warning!","tags":null,"title":"pip-services3-components","type":"docs","url":"/node/pip-services3-components/","weight":0,"wordcount":579},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe Components module contains standard component definitions that can be used to build applications and services.\n","dir":"python/pip-services3-components/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"5b7e1559947528e13a9b61a0d5784c37","permalink":"/python/pip-services3-components/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/pip-services3-components/","section":"python","summary":"The module contains the following packages:\n Auth - authentication credential stores Build - basic factories for constructing objects Cache - distributed cache Config - configuration readers and managers, whose main task is to deliver configuration parameters to the application from wherever they are being stored Connect - connection discovery and configuration services Count - performance counters Info - context info implementations that manage the saving of process information and sending additional parameter sets Lock - distributed lock components Log - basic logging components that provide console and composite logging, as well as an interface for developing custom loggers Test - minimal set of test components to make testing easier Component - the root package   Quick links  Logging Configuration API Reference Change Log Get Help Contribute Examples  Warning!","tags":null,"title":"pip-services3-components","type":"docs","url":"/python/pip-services3-components/","weight":0,"wordcount":579},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-commons/random/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"bc03c2c8b46e176859637c48ab3073f0","permalink":"/dart/pip-services3-commons/random/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-commons/random/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Random","type":"docs","url":"/dart/pip-services3-commons/random/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-commons/random/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"3f5d15f8a377321172f5c4ec8bbec54c","permalink":"/golang/pip-services3-commons/random/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-commons/random/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Random","type":"docs","url":"/golang/pip-services3-commons/random/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/random/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"5d547499b645091a5c7580f68aa715e7","permalink":"/net/pip-services3-commons/random/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/random/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Random","type":"docs","url":"/net/pip-services3-commons/random/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/random/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"29a3501baf311c5b1a161dc02ab4dec3","permalink":"/node/pip-services3-commons/random/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/random/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Random","type":"docs","url":"/node/pip-services3-commons/random/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/random/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"368765f686bd8f4cade3b3d97bc32d0a","permalink":"/python/pip-services3-commons/random/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/random/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Random","type":"docs","url":"/python/pip-services3-commons/random/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-commons/refer/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"5560802c588dcf4346a8cbc2ac32704b","permalink":"/dart/pip-services3-commons/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-commons/refer/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Refer","type":"docs","url":"/dart/pip-services3-commons/refer/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-commons/refer/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"c899ac63afbe6fd5b6b1a23cd4684fbe","permalink":"/golang/pip-services3-commons/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-commons/refer/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Refer","type":"docs","url":"/golang/pip-services3-commons/refer/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/refer/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"72c0909b30c4bdc2bae8c8361303ad90","permalink":"/net/pip-services3-commons/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/refer/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Refer","type":"docs","url":"/net/pip-services3-commons/refer/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/refer/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"1985e00124a95c4ebf921e07b09a1dd9","permalink":"/node/pip-services3-commons/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/refer/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Refer","type":"docs","url":"/node/pip-services3-commons/refer/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/refer/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"6a10d504cf417979e5ce0a59c9a008cb","permalink":"/python/pip-services3-commons/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/refer/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Refer","type":"docs","url":"/python/pip-services3-commons/refer/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-commons/reflect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"5220c8cc2a8a2e3c41ecf3d1362027c6","permalink":"/dart/pip-services3-commons/reflect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-commons/reflect/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Reflect","type":"docs","url":"/dart/pip-services3-commons/reflect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-commons/reflect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"18cbaf6a0a8f96c4f3475f15fbd2910a","permalink":"/golang/pip-services3-commons/reflect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-commons/reflect/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Reflect","type":"docs","url":"/golang/pip-services3-commons/reflect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/reflect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"d69f0d7f8387e75c9c9de15c0e6c4d7b","permalink":"/net/pip-services3-commons/reflect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/reflect/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Reflect","type":"docs","url":"/net/pip-services3-commons/reflect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/reflect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"6048840c04c12372b5645fb091051558","permalink":"/node/pip-services3-commons/reflect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/reflect/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Reflect","type":"docs","url":"/node/pip-services3-commons/reflect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/reflect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"3996ff0c66cad5605ddba6f5d721bfb4","permalink":"/python/pip-services3-commons/reflect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/reflect/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Reflect","type":"docs","url":"/python/pip-services3-commons/reflect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-commons/run/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"9956a64e01d127093861409f429d990d","permalink":"/dart/pip-services3-commons/run/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-commons/run/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Run","type":"docs","url":"/dart/pip-services3-commons/run/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-commons/run/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"6ea7e494a866278934d1e9b951043ec7","permalink":"/golang/pip-services3-commons/run/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-commons/run/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Run","type":"docs","url":"/golang/pip-services3-commons/run/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/run/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"e4677735305409fc4a66dba4c3f2acb4","permalink":"/net/pip-services3-commons/run/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/run/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Run","type":"docs","url":"/net/pip-services3-commons/run/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/run/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"be4b05f7fbf0a1313f92fcedda6d287a","permalink":"/node/pip-services3-commons/run/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/run/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Run","type":"docs","url":"/node/pip-services3-commons/run/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/run/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"f300aed0d9c9e773df1da1f37572257a","permalink":"/python/pip-services3-commons/run/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/run/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Run","type":"docs","url":"/python/pip-services3-commons/run/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-components/test/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"b7405877172e281a300651745ee63fe2","permalink":"/dart/pip-services3-components/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-components/test/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Test","type":"docs","url":"/dart/pip-services3-components/test/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-components/test/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"7f728b052c7f1efe1d61d953e7b8445a","permalink":"/golang/pip-services3-components/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-components/test/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Test","type":"docs","url":"/golang/pip-services3-components/test/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/test/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"b759286234df6b91f06befc33738d86a","permalink":"/net/pip-services3-components/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/test/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Test","type":"docs","url":"/net/pip-services3-components/test/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/test/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"62de2de82c5505a86ea1f0628d3a04b7","permalink":"/node/pip-services3-components/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/test/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Test","type":"docs","url":"/node/pip-services3-components/test/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/test/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"aeda82c19fccdbe520b1fb91f9fcc69d","permalink":"/python/pip-services3-components/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/test/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Test","type":"docs","url":"/python/pip-services3-components/test/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/pip-services3-commons/validate/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"f777ac07b54376b5291b1ddec2dd79e2","permalink":"/dart/pip-services3-commons/validate/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/pip-services3-commons/validate/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Validate","type":"docs","url":"/dart/pip-services3-commons/validate/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/pip-services3-commons/validate/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"1e8d52939e65bc725b2d5b2fe6ea8fbe","permalink":"/golang/pip-services3-commons/validate/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/pip-services3-commons/validate/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Validate","type":"docs","url":"/golang/pip-services3-commons/validate/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/validate/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"fd11f71071e96a146b3d0cc392a6d56f","permalink":"/net/pip-services3-commons/validate/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/validate/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Validate","type":"docs","url":"/net/pip-services3-commons/validate/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/validate/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"40292651eb3f7b8e6ee462456e2627ae","permalink":"/node/pip-services3-commons/validate/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/validate/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Validate","type":"docs","url":"/node/pip-services3-commons/validate/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/validate/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"e676ec5581d3fff7bd450f76228dbcc8","permalink":"/python/pip-services3-commons/validate/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/validate/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Validate","type":"docs","url":"/python/pip-services3-commons/validate/","weight":0,"wordcount":663}]