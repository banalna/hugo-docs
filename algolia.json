[{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Dart","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7a8140e038eb66ccbffbad4b5b16abd3","permalink":"/dart/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/dart/","section":"dart","summary":"Commons The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n Components The Components module contains standard component definitions that can be used to build applications and services.\n pip-services3-container-dart The Container module provides a light-weight container that can be embedded inside a service or application, or can be run by itself, as a system process, for example.","tags":null,"title":"Dart","type":"docs","url":"/hugo-docs/dart/","weight":20,"wordcount":249},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Golang","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"44ef1eec55d2959beeea4bebcb15cee6","permalink":"/golang/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/golang/","section":"golang","summary":"","tags":null,"title":"Golang","type":"docs","url":"/hugo-docs/golang/","weight":20,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Node.js","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2b62044fc16bda9f99b26a1c782d40a0","permalink":"/node/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/","section":"node","summary":"pip-services3-commons-node The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n pip-services3-components-node The Components module contains standard component definitions that can be used to build applications and services.\n pip-services3-container-node The Container module provides a light-weight container that can be embedded inside a service or application, or can be run by itself, as a system process, for example.","tags":null,"title":"Node.js","type":"docs","url":"/hugo-docs/node/","weight":20,"wordcount":249},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Python","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"43c9f2d0f31ce5b405628ba606b38b91","permalink":"/python/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/","section":"python","summary":"pip-services3-commons-python The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n pip-services3-components-python The Components module contains standard component definitions that can be used to build applications and services.\n pip-services3-container-python The Container module provides a light-weight container that can be embedded inside a service or application, or can be run by itself, as a system process, for example.","tags":null,"title":"Python","type":"docs","url":"/hugo-docs/python/","weight":20,"wordcount":249},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"home","lang":"en","lastmod":-62135596800,"lvl0":"","lvl1":"","lvl2":"","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3976528693a0108357f4928017600865","permalink":"/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/","section":"","summary":"What is Pip.Services toolkit?  Pip.Services Toolkit speeds up development of production-grade microservices for various cloud and on-premises platforms in the language of your choice. Symmetric implementation of structures and patterns across all supported languages and out-of-the-box interoperability simplify development in polyglot environments. The toolkit design based on composition allows to mix it with other frameworks and libraries.\n What can you do with Pip.Services toolkit?   Speed up your microservice development by using prebuilt patterns and components.","tags":null,"title":"","type":"docs","url":"/hugo-docs/","weight":0,"wordcount":146},{"authors":null,"categories":null,"date":-62135596800,"description":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","dir":"net/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":".Net","lvl1":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7509050a6efa431f70effd017230397a","permalink":"/net/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/","section":"net","summary":"pip-services3-commons-dotnet The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n pip-services3-components-dotnet The Components module contains standard component definitions that can be used to build applications and services.\n pip-services3-container-dotnet The Container module provides a light-weight container that can be embedded inside a service or application, or can be run by itself, as a system process, for example.","tags":null,"title":".Net","type":"docs","url":"/hugo-docs/net/","weight":0,"wordcount":249},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Components/auth/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Auth","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"49dcfa7429e72ebf440399a3163459c3","permalink":"/dart/components/auth/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/components/auth/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Auth","type":"docs","url":"/hugo-docs/dart/components/auth/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Components/auth/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Auth","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"27416c2ed0ac5f22b6cf67135f0d918f","permalink":"/golang/components/auth/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/components/auth/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Auth","type":"docs","url":"/hugo-docs/golang/components/auth/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/auth/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Auth","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fa74a6306f9df9c689eb2fbae27a88df","permalink":"/net/pip-services3-components/auth/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/auth/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Auth","type":"docs","url":"/hugo-docs/net/pip-services3-components/auth/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/auth/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Auth","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a7558a84e66a84a95e8ff5efb951e6d2","permalink":"/node/pip-services3-components/auth/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/auth/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Auth","type":"docs","url":"/hugo-docs/node/pip-services3-components/auth/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/auth/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Auth","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0019ce81c0fbe83fc8bf26394a9507cf","permalink":"/python/pip-services3-components/auth/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/auth/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Auth","type":"docs","url":"/hugo-docs/python/pip-services3-components/auth/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Components/build/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Build","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"48153182ab40681fa013395144f5ce65","permalink":"/dart/components/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/components/build/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/dart/components/build/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Components/build/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Build","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c5c18a485dade10fe9e82bb250d70b65","permalink":"/golang/components/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/components/build/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/golang/components/build/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/build/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Build","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b9b02ed18a20a6c0fdb2563c8044a712","permalink":"/net/pip-services3-components/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/build/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/net/pip-services3-components/build/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/build/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Build","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c3923d4980562a1b3628ab6667dbb7d5","permalink":"/node/pip-services3-components/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/build/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/node/pip-services3-components/build/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/build/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Build","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2255a51e4fcba8da1adb80b486d7b9fe","permalink":"/python/pip-services3-components/build/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/build/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Build","type":"docs","url":"/hugo-docs/python/pip-services3-components/build/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Components/cache/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Cache","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"517142ba1d6059b7fb57719dc448e20b","permalink":"/dart/components/cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/components/cache/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Cache","type":"docs","url":"/hugo-docs/dart/components/cache/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Components/cache/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Cache","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bf00c01e337d845eade4611c6271664e","permalink":"/golang/components/cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/components/cache/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Cache","type":"docs","url":"/hugo-docs/golang/components/cache/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/cache/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Cache","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a6f49be9818e8e306f083b9622156004","permalink":"/net/pip-services3-components/cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/cache/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Cache","type":"docs","url":"/hugo-docs/net/pip-services3-components/cache/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/cache/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Cache","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a17d227437eb4ab54b3fb5474efe8079","permalink":"/node/pip-services3-components/cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/cache/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Cache","type":"docs","url":"/hugo-docs/node/pip-services3-components/cache/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/cache/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Cache","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bd17b75c63f93e1feaaf88b73b54cc38","permalink":"/python/pip-services3-components/cache/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/cache/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Cache","type":"docs","url":"/hugo-docs/python/pip-services3-components/cache/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"Command","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"977f7b5d4150da188f05f2154df39d78","permalink":"/dart/commons/commands/command/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/dart/commons/commands/command/","section":"dart","summary":"Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Command","type":"docs","url":"/hugo-docs/dart/commons/commands/command/","weight":0,"wordcount":225},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"Command","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b90734027e2825d6da80ceefd046cd78","permalink":"/golang/commons/commands/command/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/commands/command/","section":"golang","summary":"Type type Command struct { // contains filtered or unexported fields } Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nExample:\ncommand := NewCommand(\u0026#34;add\u0026#34;, null, func (correlationId string, args *run.Parameters)(interface{}, err) { param1 := args.getAsFloat(\u0026#34;param1\u0026#34;); param2 := args.getAsFloat(\u0026#34;param2\u0026#34;); return (param1 + param2), nil; }); result, err := command.Execute(\u0026#34;123\u0026#34;, Parameters.NewParametersFromTuples(\u0026#34;param1\u0026#34;, 2, \u0026#34;param2\u0026#34;, 2)) if (err) { fmt.Println(err) } else { fmt.Println(\u0026#34;2 + 2 = \u0026#34; + result) } // Console output: 2 + 2 = 4 Funcs NewCommand  func NewCommand(name string, schema validate.","tags":null,"title":"Command","type":"docs","url":"/hugo-docs/golang/commons/commands/command/","weight":0,"wordcount":282},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Commands","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a89c4c953159f36447f1d0643e50af67","permalink":"/dart/commons/commands/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/commons/commands/","section":"dart","summary":"","tags":null,"title":"Commands","type":"docs","url":"/hugo-docs/dart/commons/commands/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/commands/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Commands","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e7f2c14c535d246ca70925d34035a52c","permalink":"/golang/commons/commands/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/commands/","section":"golang","summary":"Overview Contains implementation of Command design patterns, which can be used to implement various remote procedure calls (RPCs). RPCs replace unique calls with universal \u0026ldquo;message transfer\u0026rdquo; calls, in which the message itself contains the called method\u0026rsquo;s signature, as well as the parameters to pass for execution.\nWhen designing calls of methods/commands using the Command design pattern, uniform interfaces can be used, which, in turn, allow any amount of concrete methods to be called.","tags":null,"title":"Commands","type":"docs","url":"/hugo-docs/golang/commons/commands/","weight":0,"wordcount":325},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/commands/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Commands","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7443abadcf10fa24a61fd6cc0252f0d0","permalink":"/net/pip-services3-commons/commands/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/commands/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Commands","type":"docs","url":"/hugo-docs/net/pip-services3-commons/commands/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/commands/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Commands","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1754b9398f349ee0d4bea8b0fd23caef","permalink":"/node/pip-services3-commons/commands/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/commands/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Commands","type":"docs","url":"/hugo-docs/node/pip-services3-commons/commands/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/commands/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Commands","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b2c767ee060cf60c55d932bae99d94f4","permalink":"/python/pip-services3-commons/commands/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/commands/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Commands","type":"docs","url":"/hugo-docs/python/pip-services3-commons/commands/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Commons/commands/","expirydate":-62135596800,"fuzzywordcount":400,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"CommandSet","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"766436f398d82e673e64a8d48a92313f","permalink":"/dart/commons/commands/commandset/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/dart/commons/commands/commandset/","section":"dart","summary":"Contains a set of commands and events supported by a commandable object. The CommandSet supports command interceptors to extend and the command call chain.\nCommandSets can be used as alternative commandable interface to a business object. It can be used to auto generate multiple external services for the business object without writing much code.\nSee Command, Event, ICommandable\nExample class MyDataCommandSet extends CommandSet { IMyDataController _controller ; MyDataCommandSet(IMyDataController controller): super() { // Any data controller interface  _controller = controller; addCommand(makeGetMyDataCommand()); } ICommand _makeGetMyDataCommand() { return Command( \u0026#39;get_mydata\u0026#39;, null, (String correlationId, Parameters args) { var param = args.","tags":null,"title":"CommandSet","type":"docs","url":"/hugo-docs/dart/commons/commands/commandset/","weight":0,"wordcount":398},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/commands/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"CommandSet","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d1a1fd2103ea68d52480aa0b7f36396f","permalink":"/golang/commons/commands/commandset/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/commons/commands/commandset/","section":"golang","summary":"Type type CommandSet struct { // contains filtered or unexported fields } Contains a set of commands and events supported by a commandable object. The CommandSet supports command interceptors to extend and the command call chain.\nCommandSets can be used as alternative commandable interface to a business object. It can be used to auto generate multiple external services for the business object without writing much code.\nsee Command, Event, ICommandable","tags":null,"title":"CommandSet","type":"docs","url":"/hugo-docs/golang/commons/commands/commandset/","weight":0,"wordcount":612},{"authors":null,"categories":null,"date":-62135596800,"description":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","dir":"dart/Commons/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Commons","lvl1":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fe5c7e492a0a7cd2f279cc630e8a9e03","permalink":"/dart/commons/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/dart/commons/","section":"dart","summary":"The module consists of the following packages:  Commands - Commanding and eventing patterns Config - Configuration primitives Convert - Data converters Data - Data patterns Errors - Application errors Random -Random data generators Refer -Locator (IoC) pattern Reflect - Cross-language reflection Run - Component lifecycle management Validate - Validation framework   Quick links  Configuration Pattern Locator Pattern Component Lifecycle Components with Active Logic Data Patterns Get Help Contribute  Use Install the dotnet package as","tags":null,"title":"Commons","type":"docs","url":"/hugo-docs/dart/commons/","weight":0,"wordcount":287},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pip.services.org) polyglot microservices toolkit. It provides a set of basic patterns used in microservices or backend services. Also the module implemenets a reasonably thin abstraction layer over most fundamental functions across all languages supported by the toolkit to facilitate symmetric implementation.\n","dir":"golang/Commons/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Commons","lvl1":"This module is a part of the [Pip.Services](http://pip.services.org) polyglot microservices toolkit. It provides a set of basic patterns used in microservices or backend services. Also the module implemenets a reasonably thin abstraction layer over most fundamental functions across all languages supported by the toolkit to facilitate symmetric implementation.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2b91c5a2a52f8089f76de79d5f09295b","permalink":"/golang/commons/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/","section":"golang","summary":"The module consists of the following packages:\n Commands - commanding and eventing patterns Config - configuration framework Convert - soft value converters Data - data patterns Errors - application errors Random - random data generators Refer - locator (IoC) pattern Reflect - reflection framework Run - execution framework Validate - validation framework   Quick links  Configuration Pattern Locator Pattern Component Lifecycle Components with Active Logic Data Patterns Contribute  Use Get the package from the Github repository:","tags":null,"title":"Commons","type":"docs","url":"/hugo-docs/golang/commons/","weight":0,"wordcount":79},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe Components module contains standard component definitions that can be used to build applications and services.\n","dir":"dart/Components/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Components","lvl1":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe Components module contains standard component definitions that can be used to build applications and services.\n","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a36e8c5c4b80bf101db4533347363815","permalink":"/dart/components/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/dart/components/","section":"dart","summary":"The module contains the following packages:\n Auth - authentication credential stores Build - basic factories for constructing objects Cache - distributed cache Config - configuration readers and managers, whose main task is to deliver configuration parameters to the application from wherever they are being stored Connect - connection discovery and configuration services Count - performance counters Info - context info implementations that manage the saving of process information and sending additional parameter sets Lock - distributed lock components Log - basic logging components that provide console and composite logging, as well as an interface for developing custom loggers Test - minimal set of test components to make testing easier Component - the root package   Quick links  Logging Configuration API Reference Change Log Get Help Contribute Examples  Warning!","tags":null,"title":"Components","type":"docs","url":"/hugo-docs/dart/components/","weight":0,"wordcount":582},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe Components module contains standard component definitions that can be used to build applications and services.\n","dir":"golang/Components/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Components","lvl1":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe Components module contains standard component definitions that can be used to build applications and services.\n","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1eda975b8875fb649e3ee1a00c267914","permalink":"/golang/components/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/components/","section":"golang","summary":"The module contains the following packages:\n Auth - authentication credential stores Build - basic factories for constructing objects Cache - distributed cache Config - configuration readers and managers, whose main task is to deliver configuration parameters to the application from wherever they are being stored Connect - connection discovery and configuration services Count - performance counters Info - context info implementations that manage the saving of process information and sending additional parameter sets Lock - distributed lock components Log - basic logging components that provide console and composite logging, as well as an interface for developing custom loggers Test - minimal set of test components to make testing easier Component - the root package   Quick links  Logging Configuration API Reference Change Log Get Help Contribute Examples  Warning!","tags":null,"title":"Components","type":"docs","url":"/hugo-docs/golang/components/","weight":0,"wordcount":582},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Commons/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Config","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cb0b959436bdac050ab5b0dbdb67d1ec","permalink":"/dart/commons/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/commons/config/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/dart/commons/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Components/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Config","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"808a615dce5f200aa905b585549898db","permalink":"/dart/components/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/components/config/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/dart/components/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Config","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7d1e8f284d240f5c1191703b094e4684","permalink":"/golang/commons/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/commons/config/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/golang/commons/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Components/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Config","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"da43b91b83fb35cd239632c864fb1ba1","permalink":"/golang/components/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/components/config/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/golang/components/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Config","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8abd909bfe63a350b5d240e1d957e199","permalink":"/net/pip-services3-commons/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/config/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/net/pip-services3-commons/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Config","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f341e2259706b43593fe9278180fa49d","permalink":"/net/pip-services3-components/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/config/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/net/pip-services3-components/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Config","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"78b26f4913fa7a74545f380c481859b4","permalink":"/node/pip-services3-commons/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/config/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/node/pip-services3-commons/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Config","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"de8c370bf89b3eec2e7baf9c805c9cf4","permalink":"/node/pip-services3-components/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/config/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/node/pip-services3-components/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Config","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"74b9d3690077ba586d20a197f787597d","permalink":"/python/pip-services3-commons/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/config/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/python/pip-services3-commons/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/config/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Config","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2cc98506c43784a12d63a0cc631c454c","permalink":"/python/pip-services3-components/config/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/config/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Config","type":"docs","url":"/hugo-docs/python/pip-services3-components/config/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/config/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"ConfigParams","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b787916d2ede0ead5fa5aa289aafcd23","permalink":"/golang/commons/config/configparams/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/golang/commons/config/configparams/","section":"golang","summary":"Type type ConfigParams struct { data.StringValueMap } Contains a key-value map with configuration parameters. All values stored as strings and can be serialized as JSON or string forms. When retrieved the values can be automatically converted on read using GetAsXXX methods. The keys are case-sensitive, so it is recommended to use consistent C-style as: \u0026ldquo;my_param\u0026rdquo;\nConfiguration parameters can be broken into sections and subsections using dot notation as: \u0026ldquo;section1.subsection1.param1\u0026rdquo;. Using GetSection method all parameters from specified section can be extracted from a ConfigMap.","tags":null,"title":"ConfigParams","type":"docs","url":"/hugo-docs/golang/commons/config/configparams/","weight":0,"wordcount":560},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Components/connect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Connect","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4078ef1c056cd43c45f13ca4ab412220","permalink":"/dart/components/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/components/connect/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/dart/components/connect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Components/connect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Connect","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cea9a6defec730c367c9c07d69e98e22","permalink":"/golang/components/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/components/connect/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/golang/components/connect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/connect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Connect","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cd1b64d7d3fa833e2901529fee572c11","permalink":"/net/pip-services3-components/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/connect/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/net/pip-services3-components/connect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/connect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Connect","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b7fc9be1d62b9a7600f59cf248100a1a","permalink":"/node/pip-services3-components/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/connect/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/node/pip-services3-components/connect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/connect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Connect","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"96bd34473d436768872a6d18418f916a","permalink":"/python/pip-services3-components/connect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/connect/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Connect","type":"docs","url":"/hugo-docs/python/pip-services3-components/connect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Commons/convert/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Convert","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bb870d7c43c8d7c4ea2acf3bcd5cec44","permalink":"/dart/commons/convert/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/commons/convert/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Convert","type":"docs","url":"/hugo-docs/dart/commons/convert/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/convert/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Convert","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"72b08aed786dae87d61d832bfeb538cf","permalink":"/golang/commons/convert/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/commons/convert/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Convert","type":"docs","url":"/hugo-docs/golang/commons/convert/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/convert/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Convert","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b940374767cf065353134f8714bdf2e3","permalink":"/net/pip-services3-commons/convert/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/convert/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Convert","type":"docs","url":"/hugo-docs/net/pip-services3-commons/convert/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/convert/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Convert","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e6b0b5f8963c5a1841bd463e71eb5152","permalink":"/node/pip-services3-commons/convert/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/convert/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Convert","type":"docs","url":"/hugo-docs/node/pip-services3-commons/convert/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/convert/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Convert","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"730c370397a51d1074831e8ae7887421","permalink":"/python/pip-services3-commons/convert/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/convert/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Convert","type":"docs","url":"/hugo-docs/python/pip-services3-commons/convert/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Components/count/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Count","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7ca655f767813b6f007d6c5d69c3f776","permalink":"/dart/components/count/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/components/count/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Count","type":"docs","url":"/hugo-docs/dart/components/count/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Components/count/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Count","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"439da73aadbe032306eaf3f77ddff96b","permalink":"/golang/components/count/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/components/count/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Count","type":"docs","url":"/hugo-docs/golang/components/count/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/count/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Count","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"664f8d96e92955561bca4abe54d4697a","permalink":"/net/pip-services3-components/count/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/count/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Count","type":"docs","url":"/hugo-docs/net/pip-services3-components/count/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/count/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Count","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"aa9520c1ee2167f519b3a83808c77a7b","permalink":"/node/pip-services3-components/count/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/count/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Count","type":"docs","url":"/hugo-docs/node/pip-services3-components/count/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/count/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Count","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"865f48d775a63938155d876135c2f361","permalink":"/python/pip-services3-components/count/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/count/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Count","type":"docs","url":"/hugo-docs/python/pip-services3-components/count/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Commons/data/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Data","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c8b80f2c7c89ab077d422c490b5a7337","permalink":"/dart/commons/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/commons/data/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Data","type":"docs","url":"/hugo-docs/dart/commons/data/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/data/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Data","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"467794c06c16431ee6368890b2cf1051","permalink":"/golang/commons/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/commons/data/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Data","type":"docs","url":"/hugo-docs/golang/commons/data/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/data/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Data","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5fb92f23563cf929daeb096963a3d72c","permalink":"/net/pip-services3-commons/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/data/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Data","type":"docs","url":"/hugo-docs/net/pip-services3-commons/data/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/data/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Data","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"29b6303ddfa50a88bd6c56a476eaf323","permalink":"/node/pip-services3-commons/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/data/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Data","type":"docs","url":"/hugo-docs/node/pip-services3-commons/data/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/data/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Data","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b6bf132a9f1cb311707b2530e058554c","permalink":"/python/pip-services3-commons/data/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/data/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Data","type":"docs","url":"/hugo-docs/python/pip-services3-commons/data/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Commons/errors/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Errors","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cc6d6958d3de19bd6e4b81b56c1a3a23","permalink":"/dart/commons/errors/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/commons/errors/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Errors","type":"docs","url":"/hugo-docs/dart/commons/errors/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/errors/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Errors","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"59b83f5c5a83c482b631a53a06e3ec6b","permalink":"/golang/commons/errors/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/commons/errors/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Errors","type":"docs","url":"/hugo-docs/golang/commons/errors/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/errors/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Errors","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"232720dfe4fef686a82eaf01dd9be0d7","permalink":"/net/pip-services3-commons/errors/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/errors/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Errors","type":"docs","url":"/hugo-docs/net/pip-services3-commons/errors/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/errors/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Errors","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"afb2e38149acd3989dd65797b5c4f218","permalink":"/node/pip-services3-commons/errors/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/errors/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Errors","type":"docs","url":"/hugo-docs/node/pip-services3-commons/errors/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/errors/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Errors","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b794247ba831a0d3e51884cb6b7722a4","permalink":"/python/pip-services3-commons/errors/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/errors/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Errors","type":"docs","url":"/hugo-docs/python/pip-services3-commons/errors/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"Event","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bcd17f8a20e7fbe4eaff21220eb02a48","permalink":"/dart/commons/commands/event/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/dart/commons/commands/event/","section":"dart","summary":"Concrete implementation of IEvent interface. It allows to send asynchronous notifications to multiple subscribed listeners. See IEvent, IEventListener\nExample var event = Event(\u0026#39;my_event\u0026#39;); event.addListener(myListener); event.notify(\u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, \u0026#39;ABC\u0026#39;, \u0026#39;param2\u0026#39;, 123] )); ","tags":null,"title":"Event","type":"docs","url":"/hugo-docs/dart/commons/commands/event/","weight":0,"wordcount":31},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/commands/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"Event","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fd0cccdeba3ec5c924b46098a0294f65","permalink":"/golang/commons/commands/event/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/commands/event/","section":"golang","summary":"Type type Event struct { // contains filtered or unexported fields } Concrete implementation of IEvent interface. It allows to send asynchronous notifications to multiple subscribed listeners.\nExample:\nevent: = NewEvent(\u0026#34;my_event\u0026#34;); event.AddListener(myListener); event.Notify(\u0026#34;123\u0026#34;, Parameters.fromTuples( \u0026#34;param1\u0026#34;, \u0026#34;ABC\u0026#34;, \u0026#34;param2\u0026#34;, 123 )); Funcs NewEvent  func NewEvent(name string) *Event\n Creates a new event and assigns its name. Throws an Error if the name is null.\n  name: string the name of the event that is to be created.","tags":null,"title":"Event","type":"docs","url":"/hugo-docs/golang/commons/commands/event/","weight":0,"wordcount":199},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"Get Started","lvl1":"","lvl2":"","lvl3":null,"lvl4":null,"lvl5":"","objectID":"acce8be8b0123631e58130cc34d7f08e","permalink":"/get_started/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/get_started/","section":"","summary":"","tags":null,"title":"Get Started","type":"docs","url":"/hugo-docs/get_started/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"Getting Started","lvl1":"","lvl2":"","lvl3":null,"lvl4":null,"lvl5":"","objectID":"90d2f5b321651d7e838fc1e3cf5f419b","permalink":"/getting_started/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/getting_started/","section":"","summary":"","tags":null,"title":"Getting Started","type":"docs","url":"/hugo-docs/getting_started/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"ICommand","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"af68e13245f14300a729c0f3122ac16d","permalink":"/golang/commons/commands/icommand/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/commands/icommand/","section":"golang","summary":"Type type ICommand interface { run.IExecutable } An interface for Commands, which are part of the Command design pattern. Each command wraps a method or function and allows to call them in uniform and safe manner.\nFuncs Name  Name() string\n Gets the command name.\n Returns string the command name.  Validate  Validate(args *run.Parameters) []*validate.ValidationResult\n Validates command arguments before execution using defined schema.\n args: Parameters the parameters (arguments) to validate.","tags":null,"title":"ICommand","type":"docs","url":"/hugo-docs/golang/commons/commands/icommand/","weight":0,"wordcount":77},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"ICommandable","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"732381f22f88e6f10dd542869d58d830","permalink":"/golang/commons/commands/icommandable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/commands/icommandable/","section":"golang","summary":"Type type ICommandable interface {} An interface for commandable objects, which are part of the command design pattern. The commandable object exposes its functonality as commands and events groupped into a CommandSet.\nThis interface is typically implemented by controllers and is used to auto generate external interfaces.\nExample:\ntype MyDataController { _commandSet CommandSet; } func (dc *MyDataController) getCommandSet() CommandSet { if (dc._commandSet == nil) dc._commandSet = NewDataCommandSet(); return dc._commandSet; } Funcs GetCommandSet  GetCommandSet() *CommandSet","tags":null,"title":"ICommandable","type":"docs","url":"/hugo-docs/golang/commons/commands/icommandable/","weight":0,"wordcount":95},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"ICommandInterceptor","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"abda2d1a54aa0696a56c6670d3400a7c","permalink":"/golang/commons/commands/icommandinterceptor/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/commands/icommandinterceptor/","section":"golang","summary":"Type type ICommandInterceptor interface {} An interface for stackable command intercepters, which can extend and modify the command call chain. This mechanism can be used for authentication, logging, and other functions.\nsee ICommand, InterceptedCommand\nFuncs Name  Name(command ICommand) string\n Gets the name of the wrapped command. The interceptor can use this method to override the command name. Otherwise it shall just delegate the call to the wrapped command.","tags":null,"title":"ICommandInterceptor","type":"docs","url":"/hugo-docs/golang/commons/commands/icommandinterceptor/","weight":0,"wordcount":253},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/config/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"IConfigurable","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e47ccf2ff46b38441d2b5d75b3e205c0","permalink":"/golang/commons/config/iconfigurable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/config/iconfigurable/","section":"golang","summary":"Type type IConfigurable interface { } An interface to set configuration parameters to an object.\nIt can be added to any existing class by implementing a single configure() method.\nIf you need to emphasis the fact that configure() method can be called multiple times to change object configuration in runtime, use IReconfigurable interface instead.\nFuncs Configure  Configure(config *ConfigParams)\n Configures object by passing configuration parameters.\n config: ConfigParams configuration parameters to be set.","tags":null,"title":"IConfigurable","type":"docs","url":"/hugo-docs/golang/commons/config/iconfigurable/","weight":0,"wordcount":71},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/commands/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"IEvent","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"9480f8ea67f648eee822312431a2178b","permalink":"/golang/commons/commands/ievent/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/commands/ievent/","section":"golang","summary":"Type type IEvent interface { run.INotifiable } An interface for Events, which are part of the Command design pattern. Events allows to send asynchronious notifications to multiple subscribed listeners.\nsee IEventListener\nFuncs Name  Name() string\n Gets the event name.\n Returns string the name of the event.  Listeners  Listeners() []IEventListener\n Gets all subscribed listeners.\n Returns []IEventListener a list of listeners.  AddListener  AddListener(listener IEventListener)","tags":null,"title":"IEvent","type":"docs","url":"/hugo-docs/golang/commons/commands/ievent/","weight":0,"wordcount":101},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/commands/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"IEventListener","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"69fce31cde5d60a94d650b645696550a","permalink":"/golang/commons/commands/ieventlistener/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/commands/ieventlistener/","section":"golang","summary":"Type type IEventListener interface {} An interface for listener objects that receive notifications on fired events.\nsee IEvent, Event\nExample:\ntype MyListener { msg string; } func (l* MyListener) onEvent(correlationId string, event IEvent, args Parameters) { fmt.Println(\u0026#34;Fired event \u0026#34; + event.Name()); } let event = NewEvent(\u0026#34;myevent\u0026#34;); _listener := MyListener{}; event.addListener(_listener); event.notify(\u0026#34;123\u0026#34;, Parameters.FromTuples(\u0026#34;param1\u0026#34;, \u0026#34;ABC\u0026#34;)); // Console output: Fired event myevent Funcs OnEvent  OnEvent(correlationId string, e IEvent, value *run.Parameters)\n A method called when events this listener is subscrubed to are fired.","tags":null,"title":"IEventListener","type":"docs","url":"/hugo-docs/golang/commons/commands/ieventlistener/","weight":0,"wordcount":99},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Components/info/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Info","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"096341a90738f06b1cba98ed85a1444d","permalink":"/dart/components/info/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/components/info/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Info","type":"docs","url":"/hugo-docs/dart/components/info/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Components/info/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Info","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1b96cee6df57e258036ad84a907c8878","permalink":"/golang/components/info/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/components/info/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Info","type":"docs","url":"/hugo-docs/golang/components/info/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/info/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Info","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7650ff55bbf8f9847518997718195cc9","permalink":"/net/pip-services3-components/info/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/info/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Info","type":"docs","url":"/hugo-docs/net/pip-services3-components/info/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/info/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Info","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"8e1b59ca9f345111173429962e37b640","permalink":"/node/pip-services3-components/info/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/info/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Info","type":"docs","url":"/hugo-docs/node/pip-services3-components/info/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/info/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Info","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"c86e1dc09657c3125778179995eff4f1","permalink":"/python/pip-services3-components/info/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/info/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Info","type":"docs","url":"/hugo-docs/python/pip-services3-components/info/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/commands/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"InterceptedCommand","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"146eddc5e1546624c639bc273683b6ff","permalink":"/golang/commons/commands/interceptedcommand/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/golang/commons/commands/interceptedcommand/","section":"golang","summary":"Type type InterceptedCommand struct { // contains filtered or unexported fields } Implements a command wrapped by an interceptor. It allows to build command call chains. The interceptor can alter execution and delegate calls to a next command, which can be intercepted or concrete.\nsee ICommand, ICommandInterceptor\nExample:\ntype CommandLogger { msg string } func (cl * CommandLogger) Name(command ICommand) string { return command.Name(); } func (cl * CommandLogger) Execute(correlationId string, command ICommand, args Parameters) (res interface{}, err error){ fmt.","tags":null,"title":"InterceptedCommand","type":"docs","url":"/hugo-docs/golang/commons/commands/interceptedcommand/","weight":0,"wordcount":295},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/config/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"IReconfigurable","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"dea46f164f9cd102d2d2ed7d62273a68","permalink":"/golang/commons/config/ireconfigurable/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/config/ireconfigurable/","section":"golang","summary":"Type type IReconfigurable interface { IConfigurable } An interface to set configuration parameters to an object.\nIt is similar to IConfigurable interface, but emphasises the fact that Configure() method can be called more than once to change object configuration in runtime.","tags":null,"title":"IReconfigurable","type":"docs","url":"/hugo-docs/golang/commons/config/ireconfigurable/","weight":0,"wordcount":41},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Components/lock/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Lock","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"a25cfae57960ff6ae904e5db5f798795","permalink":"/dart/components/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/components/lock/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Lock","type":"docs","url":"/hugo-docs/dart/components/lock/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Components/lock/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Lock","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"201270bfd641d7a4af35d02eb8475f8f","permalink":"/golang/components/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/components/lock/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Lock","type":"docs","url":"/hugo-docs/golang/components/lock/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/lock/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Lock","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ab488c5d6087b043d9f963e35e347678","permalink":"/net/pip-services3-components/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/lock/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Lock","type":"docs","url":"/hugo-docs/net/pip-services3-components/lock/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/lock/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Lock","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"349adcc6d89c7827b5a0f67f303c637c","permalink":"/node/pip-services3-components/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/lock/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Lock","type":"docs","url":"/hugo-docs/node/pip-services3-components/lock/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/lock/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Lock","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"67d3c99053c992604fabd67937247e45","permalink":"/python/pip-services3-components/lock/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/lock/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Lock","type":"docs","url":"/hugo-docs/python/pip-services3-components/lock/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Components/log/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Log","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"bf39809f950956ecb82a7ddcabadcb97","permalink":"/dart/components/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/components/log/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Log","type":"docs","url":"/hugo-docs/dart/components/log/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Components/log/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Log","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0ec6c399fec079f979e6a52d1461a672","permalink":"/golang/components/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/components/log/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Log","type":"docs","url":"/hugo-docs/golang/components/log/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/log/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Log","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ba3d0064d1b1a952635a28dd821cabd1","permalink":"/net/pip-services3-components/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/log/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Log","type":"docs","url":"/hugo-docs/net/pip-services3-components/log/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/log/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Log","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d05b07c87482b2335df556907e65a775","permalink":"/node/pip-services3-components/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/log/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Log","type":"docs","url":"/hugo-docs/node/pip-services3-components/log/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/log/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Log","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e3cd2f536ee63d3a5df1b608d9000aa7","permalink":"/python/pip-services3-components/log/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/log/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Log","type":"docs","url":"/hugo-docs/python/pip-services3-components/log/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Commons/commands/logger/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Logger","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"97f03c3e105fb0fa8f069e8c7c9a9a58","permalink":"/dart/commons/commands/logger/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/dart/commons/commands/logger/","section":"dart","summary":"Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Logger","type":"docs","url":"/hugo-docs/dart/commons/commands/logger/","weight":0,"wordcount":225},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Commons/commands/logger/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"Loggers","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fb6b520d752b153bfe092113ba3f1a0c","permalink":"/dart/commons/commands/logger/loggers/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/dart/commons/commands/logger/loggers/","section":"dart","summary":"","tags":null,"title":"Loggers","type":"docs","url":"/hugo-docs/dart/commons/commands/logger/loggers/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/config/","expirydate":-62135596800,"fuzzywordcount":200,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"NameResolver","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"0061de0d74449c6ed101f179d3166284","permalink":"/golang/commons/config/nameresolver/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/golang/commons/config/nameresolver/","section":"golang","summary":"Type type TNameResolver struct{} A helper class that allows to extract component name from configuration parameters. The name can be defined in \u0026ldquo;id\u0026rdquo;, \u0026ldquo;name\u0026rdquo; parameters or inside a component descriptor.\nExample:\nconfig := NewConfigParamsFromTuples( \u0026#34;descriptor\u0026#34;, \u0026#34;myservice:connector:aws:connector1:1.0\u0026#34;, \u0026#34;param1\u0026#34;, \u0026#34;ABC\u0026#34;, \u0026#34;param2\u0026#34;, 123 ); name := NameResolver.Resolve(config); // Result: connector1 Funcs Resolve  func (c *TNameResolver) Resolve(config *ConfigParams) string\n Resolves a component name from configuration parameters. The name can be stored in \u0026ldquo;id\u0026rdquo;, \u0026ldquo;name\u0026rdquo; fields or inside a component descriptor.","tags":null,"title":"NameResolver","type":"docs","url":"/hugo-docs/golang/commons/config/nameresolver/","weight":0,"wordcount":176},{"authors":null,"categories":null,"date":-62135596800,"description":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","dir":"net/pip-services3-commons/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"pip-services3-commons","lvl1":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3e57a2bae192a5cdc87c3b7aa03966e4","permalink":"/net/pip-services3-commons/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/net/pip-services3-commons/","section":"net","summary":"The module consists of the following packages:\n Commands - Commanding and eventing patterns Config - Configuration primitives Convert - Data converters Data - Data patterns Errors - Application errors Random -Random data generators Refer -Locator (IoC) pattern Reflect - Cross-language reflection Run - Component lifecycle management Validate - Validation framework   Quick links  Configuration Pattern Locator Pattern Component Lifecycle Components with Active Logic Data Patterns Get Help Contribute  Use Install the dotnet package as","tags":null,"title":"pip-services3-commons","type":"docs","url":"/hugo-docs/net/pip-services3-commons/","weight":0,"wordcount":287},{"authors":null,"categories":null,"date":-62135596800,"description":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","dir":"node/pip-services3-commons/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"pip-services3-commons","lvl1":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"cf773571cec9afb3aa7cebcc563a85e4","permalink":"/node/pip-services3-commons/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/node/pip-services3-commons/","section":"node","summary":"The module consists of the following packages:\n Commands - Commanding and eventing patterns Config - Configuration primitives Convert - Data converters Data - Data patterns Errors - Application errors Random -Random data generators Refer -Locator (IoC) pattern Reflect - Cross-language reflection Run - Component lifecycle management Validate - Validation framework   Quick links  Configuration Pattern Locator Pattern Component Lifecycle Components with Active Logic Data Patterns Get Help Contribute  Use Install the dotnet package as","tags":null,"title":"pip-services3-commons","type":"docs","url":"/hugo-docs/node/pip-services3-commons/","weight":0,"wordcount":287},{"authors":null,"categories":null,"date":-62135596800,"description":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","dir":"python/pip-services3-commons/","expirydate":-62135596800,"fuzzywordcount":300,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"pip-services3-commons","lvl1":"The Commons module provides portable abstractions and patterns that can be used to implement non-trivial business logic in applications and services. The code provides a reasonably thin abstraction layer over most fundamental functions and delivers symmetric implementation that can be quickly ported between different platforms.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2f0514e12567c7e5cc663d13b901ccf1","permalink":"/python/pip-services3-commons/","publishdate":"0001-01-01T00:00:00Z","readingtime":2,"relpermalink":"/python/pip-services3-commons/","section":"python","summary":"The module consists of the following packages:\n Commands - Commanding and eventing patterns Config - Configuration primitives Convert - Data converters Data - Data patterns Errors - Application errors Random -Random data generators Refer -Locator (IoC) pattern Reflect - Cross-language reflection Run - Component lifecycle management Validate - Validation framework   Quick links  Configuration Pattern Locator Pattern Component Lifecycle Components with Active Logic Data Patterns Get Help Contribute  Use Install the dotnet package as","tags":null,"title":"pip-services3-commons","type":"docs","url":"/hugo-docs/python/pip-services3-commons/","weight":0,"wordcount":287},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe Components module contains standard component definitions that can be used to build applications and services.\n","dir":"net/pip-services3-components/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"pip-services3-components","lvl1":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe Components module contains standard component definitions that can be used to build applications and services.\n","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"23cb032834008c7a735f68c1b86bf8fe","permalink":"/net/pip-services3-components/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/net/pip-services3-components/","section":"net","summary":"The module contains the following packages:\n Auth - authentication credential stores Build - basic factories for constructing objects Cache - distributed cache Config - configuration readers and managers, whose main task is to deliver configuration parameters to the application from wherever they are being stored Connect - connection discovery and configuration services Count - performance counters Info - context info implementations that manage the saving of process information and sending additional parameter sets Lock - distributed lock components Log - basic logging components that provide console and composite logging, as well as an interface for developing custom loggers Test - minimal set of test components to make testing easier Component - the root package   Quick links  Logging Configuration API Reference Change Log Get Help Contribute Examples  Warning!","tags":null,"title":"pip-services3-components","type":"docs","url":"/hugo-docs/net/pip-services3-components/","weight":0,"wordcount":582},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe Components module contains standard component definitions that can be used to build applications and services.\n","dir":"node/pip-services3-components/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"pip-services3-components","lvl1":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe Components module contains standard component definitions that can be used to build applications and services.\n","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2a194db49aa20fa9dffa22b0b049068c","permalink":"/node/pip-services3-components/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/node/pip-services3-components/","section":"node","summary":"The module contains the following packages:\n Auth - authentication credential stores Build - basic factories for constructing objects Cache - distributed cache Config - configuration readers and managers, whose main task is to deliver configuration parameters to the application from wherever they are being stored Connect - connection discovery and configuration services Count - performance counters Info - context info implementations that manage the saving of process information and sending additional parameter sets Lock - distributed lock components Log - basic logging components that provide console and composite logging, as well as an interface for developing custom loggers Test - minimal set of test components to make testing easier Component - the root package   Quick links  Logging Configuration API Reference Change Log Get Help Contribute Examples  Warning!","tags":null,"title":"pip-services3-components","type":"docs","url":"/hugo-docs/node/pip-services3-components/","weight":0,"wordcount":582},{"authors":null,"categories":null,"date":-62135596800,"description":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe Components module contains standard component definitions that can be used to build applications and services.\n","dir":"python/pip-services3-components/","expirydate":-62135596800,"fuzzywordcount":600,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"pip-services3-components","lvl1":"This module is a part of the [Pip.Services](http://pipservices.org) polyglot microservices toolkit.\nThe Components module contains standard component definitions that can be used to build applications and services.\n","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5b7e1559947528e13a9b61a0d5784c37","permalink":"/python/pip-services3-components/","publishdate":"0001-01-01T00:00:00Z","readingtime":3,"relpermalink":"/python/pip-services3-components/","section":"python","summary":"The module contains the following packages:\n Auth - authentication credential stores Build - basic factories for constructing objects Cache - distributed cache Config - configuration readers and managers, whose main task is to deliver configuration parameters to the application from wherever they are being stored Connect - connection discovery and configuration services Count - performance counters Info - context info implementations that manage the saving of process information and sending additional parameter sets Lock - distributed lock components Log - basic logging components that provide console and composite logging, as well as an interface for developing custom loggers Test - minimal set of test components to make testing easier Component - the root package   Quick links  Logging Configuration API Reference Change Log Get Help Contribute Examples  Warning!","tags":null,"title":"pip-services3-components","type":"docs","url":"/hugo-docs/python/pip-services3-components/","weight":0,"wordcount":582},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Commons/random/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Random","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"373b272747d66868304b4135dc7fb054","permalink":"/dart/commons/random/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/commons/random/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Random","type":"docs","url":"/hugo-docs/dart/commons/random/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/random/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Random","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"eb5fbc9421f3b814cd689781d942f691","permalink":"/golang/commons/random/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/commons/random/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Random","type":"docs","url":"/hugo-docs/golang/commons/random/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/random/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Random","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5d547499b645091a5c7580f68aa715e7","permalink":"/net/pip-services3-commons/random/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/random/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Random","type":"docs","url":"/hugo-docs/net/pip-services3-commons/random/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/random/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Random","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"29a3501baf311c5b1a161dc02ab4dec3","permalink":"/node/pip-services3-commons/random/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/random/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Random","type":"docs","url":"/hugo-docs/node/pip-services3-commons/random/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/random/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Random","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"368765f686bd8f4cade3b3d97bc32d0a","permalink":"/python/pip-services3-commons/random/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/random/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Random","type":"docs","url":"/hugo-docs/python/pip-services3-commons/random/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"Recipes","lvl1":"","lvl2":"","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fe046832173bf7da8640d721d19a315b","permalink":"/recipes/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/recipes/","section":"","summary":"","tags":null,"title":"Recipes","type":"docs","url":"/hugo-docs/recipes/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Commons/refer/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Refer","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e2126ce6c943445a7e8d7bf3fd2a3161","permalink":"/dart/commons/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/commons/refer/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Refer","type":"docs","url":"/hugo-docs/dart/commons/refer/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/refer/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Refer","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"480fe4888ec3e993f1409d5fdcc3d8c0","permalink":"/golang/commons/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/commons/refer/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Refer","type":"docs","url":"/hugo-docs/golang/commons/refer/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/refer/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Refer","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"72c0909b30c4bdc2bae8c8361303ad90","permalink":"/net/pip-services3-commons/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/refer/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Refer","type":"docs","url":"/hugo-docs/net/pip-services3-commons/refer/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/refer/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Refer","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"1985e00124a95c4ebf921e07b09a1dd9","permalink":"/node/pip-services3-commons/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/refer/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Refer","type":"docs","url":"/hugo-docs/node/pip-services3-commons/refer/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/refer/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Refer","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6a10d504cf417979e5ce0a59c9a008cb","permalink":"/python/pip-services3-commons/refer/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/refer/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Refer","type":"docs","url":"/hugo-docs/python/pip-services3-commons/refer/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Commons/reflect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Reflect","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"ffa481a110fa7dba7b0e7980fb9569f3","permalink":"/dart/commons/reflect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/commons/reflect/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Reflect","type":"docs","url":"/hugo-docs/dart/commons/reflect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/reflect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Reflect","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"5fefa1b16caaec79af3cdc88896dfc49","permalink":"/golang/commons/reflect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/commons/reflect/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Reflect","type":"docs","url":"/hugo-docs/golang/commons/reflect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/reflect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Reflect","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"d69f0d7f8387e75c9c9de15c0e6c4d7b","permalink":"/net/pip-services3-commons/reflect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/reflect/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Reflect","type":"docs","url":"/hugo-docs/net/pip-services3-commons/reflect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/reflect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Reflect","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"6048840c04c12372b5645fb091051558","permalink":"/node/pip-services3-commons/reflect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/reflect/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Reflect","type":"docs","url":"/hugo-docs/node/pip-services3-commons/reflect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/reflect/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Reflect","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3996ff0c66cad5605ddba6f5d721bfb4","permalink":"/python/pip-services3-commons/reflect/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/reflect/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Reflect","type":"docs","url":"/hugo-docs/python/pip-services3-commons/reflect/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Commons/run/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Run","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"369192bbff6b2f8ee6bc9acd9d02337e","permalink":"/dart/commons/run/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/commons/run/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Run","type":"docs","url":"/hugo-docs/dart/commons/run/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/run/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Run","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"81e51c5f1ef660adaba616765fc5e2e0","permalink":"/golang/commons/run/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/commons/run/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Run","type":"docs","url":"/hugo-docs/golang/commons/run/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/run/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Run","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e4677735305409fc4a66dba4c3f2acb4","permalink":"/net/pip-services3-commons/run/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/run/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Run","type":"docs","url":"/hugo-docs/net/pip-services3-commons/run/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/run/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Run","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"be4b05f7fbf0a1313f92fcedda6d287a","permalink":"/node/pip-services3-commons/run/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/run/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Run","type":"docs","url":"/hugo-docs/node/pip-services3-commons/run/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/run/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Run","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"f300aed0d9c9e773df1da1f37572257a","permalink":"/python/pip-services3-commons/run/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/run/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Run","type":"docs","url":"/hugo-docs/python/pip-services3-commons/run/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Components/test/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Test","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"3606e38df16ff727461c323d9b75ec97","permalink":"/dart/components/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/components/test/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Test","type":"docs","url":"/hugo-docs/dart/components/test/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Components/test/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Test","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"7d86926f05966ea9cf3fdd7a9da04e9b","permalink":"/golang/components/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/components/test/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Test","type":"docs","url":"/hugo-docs/golang/components/test/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-components/test/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Test","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"b759286234df6b91f06befc33738d86a","permalink":"/net/pip-services3-components/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-components/test/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Test","type":"docs","url":"/hugo-docs/net/pip-services3-components/test/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-components/test/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Test","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"62de2de82c5505a86ea1f0628d3a04b7","permalink":"/node/pip-services3-components/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-components/test/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Test","type":"docs","url":"/hugo-docs/node/pip-services3-components/test/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-components/test/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Test","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"aeda82c19fccdbe520b1fb91f9fcc69d","permalink":"/python/pip-services3-components/test/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-components/test/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Test","type":"docs","url":"/hugo-docs/python/pip-services3-components/test/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"/","expirydate":-62135596800,"fuzzywordcount":100,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"lvl0":"Tutorials","lvl1":"","lvl2":"","lvl3":null,"lvl4":null,"lvl5":"","objectID":"2f9666f86bd8527efa1103fc382863ca","permalink":"/tutorials/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/tutorials/","section":"","summary":"","tags":null,"title":"Tutorials","type":"docs","url":"/hugo-docs/tutorials/","weight":0,"wordcount":0},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"dart/Commons/validate/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Validate","lvl1":"","lvl2":"dart","lvl3":null,"lvl4":null,"lvl5":"","objectID":"4ac4c203426e13c110e3e6f9c4e59592","permalink":"/dart/commons/validate/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/dart/commons/validate/","section":"dart","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Validate","type":"docs","url":"/hugo-docs/dart/commons/validate/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"golang/Commons/validate/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Validate","lvl1":"","lvl2":"golang","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e23be8b41bbaf55b3cc9563cd8e4ea86","permalink":"/golang/commons/validate/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/golang/commons/validate/","section":"golang","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Validate","type":"docs","url":"/hugo-docs/golang/commons/validate/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"net/pip-services3-commons/validate/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Validate","lvl1":"","lvl2":"net","lvl3":null,"lvl4":null,"lvl5":"","objectID":"fd11f71071e96a146b3d0cc392a6d56f","permalink":"/net/pip-services3-commons/validate/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/net/pip-services3-commons/validate/","section":"net","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Validate","type":"docs","url":"/hugo-docs/net/pip-services3-commons/validate/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"node/pip-services3-commons/validate/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Validate","lvl1":"","lvl2":"node","lvl3":null,"lvl4":null,"lvl5":"","objectID":"40292651eb3f7b8e6ee462456e2627ae","permalink":"/node/pip-services3-commons/validate/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/node/pip-services3-commons/validate/","section":"node","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Validate","type":"docs","url":"/hugo-docs/node/pip-services3-commons/validate/","weight":0,"wordcount":663},{"authors":null,"categories":null,"date":-62135596800,"description":"","dir":"python/pip-services3-commons/validate/","expirydate":-62135596800,"fuzzywordcount":700,"keywords":null,"kind":"section","lang":"en","lastmod":-62135596800,"lvl0":"Validate","lvl1":"","lvl2":"python","lvl3":null,"lvl4":null,"lvl5":"","objectID":"e676ec5581d3fff7bd450f76228dbcc8","permalink":"/python/pip-services3-commons/validate/","publishdate":"0001-01-01T00:00:00Z","readingtime":4,"relpermalink":"/python/pip-services3-commons/validate/","section":"python","summary":"Command Concrete implementation of ICommand interface. Command allows to call a method or function using Command pattern.\nvar command = Command(\u0026#39;add\u0026#39;, null, (correlationId, args) { var param1 = args.getAsFloat(\u0026#39;param1\u0026#39;); var param2 = args.getAsFloat(\u0026#39;param2\u0026#39;); var result = param1 + param2; return result; }); result = await command.execute( \u0026#39;123\u0026#39;, Parameters.fromTuples( [\u0026#39;param1\u0026#39;, 2, \u0026#39;param2\u0026#39;, 2] )).catch(err) { if (err!= null) print(err); else print(\u0026#39;2 + 2 = \u0026#39; + result); } ); // Console output: 2 + 2 = 4 See ICommand, CommandSet","tags":null,"title":"Validate","type":"docs","url":"/hugo-docs/python/pip-services3-commons/validate/","weight":0,"wordcount":663}]